from datetime import date
from datetime import timedelta

from aiogram import Dispatcher
from aiogram.types import Message, CallbackQuery
from aiogram.dispatcher.filters import CommandStart
from aiogram.dispatcher import FSMContext

from bottaxi.keyboards.inline_users import callback_earnings, callback_unpaid, cancel_order_keyboard, earnings_keyboard, \
    order_types, unpaid_orders_keyboard
from bottaxi.keyboards.user_button import choose_menu_for_user
from bottaxi.misc.states import RegisterState
from bottaxi.models.query import access_debt_mode,get_info_from_help, get_user
from bottaxi.services.other_functions.conts import list_months
from bottaxi.services.requests.earnings.setting_earning_driver import settings_for_select_period_earnings_driver
from bottaxi.services.requests.limit.choose_payment_method import change_of_payment_method
from bottaxi.services.requests.order.choose_order_method import change_working_order_method
from bottaxi.services.requests.unpaid_orders.setting_up_unpaid_orders import settings_for_select_period_unpaid_orders
from bottaxi.services.set_commands import set_default_commands


async def user_start(message: Message, session, state: FSMContext):
    """–†–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î."""
    # —Ç–≥ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    telegram_id = message.chat.id
    user = await get_user(session, telegram_id)
    # –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π.
    await set_default_commands(
        message.bot,
        user_id=message.from_id
    )

    if user is None:
        # –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        await message.answer(f'{message.from_user.full_name}, –≤–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç –ø–∞—Ä–∫–∞ .\n '
                             '–î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–∞–∫ –≤ –Ø–Ω–¥–µ–∫—Å –ü—Ä–æ.')
        # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –≤ —Ö–µ–Ω–¥–ª–µ—Ä add_user –±—É–¥–µ—Ç –æ—Ç–ª–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        await RegisterState.phone.set()
    elif user is not None:
        # –≤—ã–≤–æ–¥–∏—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –≤—ã–±–æ—Ä–µ —Ç–∞—Ä–∏—Ñ–∞ —Ä–∞–±–æ—Ç—ã
        await message.answer(
            f'{user[0]} {user[1]}, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –∑–∞ –∑–∞–∫–∞–∑—ã –≤ –Ø–Ω–¥–µ–∫—Å –ü—Ä–æ',
            reply_markup=await choose_menu_for_user(session, telegram_id)
        )
        await state.update_data(first_name=user[0], middle_name=user[1], taxi_id=user[2], phone=user[3])


async def payment_method(message: Message, session, state: FSMContext):
    """–í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã."""
    admin = message.bot.get('config').tg_bot.admin_ids[0]
    # –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
    method = message.text

    # –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–¥.
    first_name, middle_name, taxi_id, phone, last_name = None, None, None, None, None
    telegram_id = message.chat.id
    user = await get_user(session, telegram_id)
    if user is not None:
        first_name, middle_name, taxi_id, phone, last_name = user

    if method == 'üí≥–ë–µ–∑–Ω–∞–ª' and user is not None:
        # —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–∏–º–∏—Ç–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ –±–µ–∑–Ω–∞–ª—É.
        response = await change_of_payment_method(message, session, '1000000', str(phone), taxi_id)
        status = response.get('status')
        if status == 200:
            await message.answer(f'{first_name} {middle_name}, '
                                 '–í–∞–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏–º–∏—Ç 100000 —Ä—É–±. '
                                 '–ü–æ–∫–∞ –í–∞—à –±–∞–ª–∞–Ω—Å –Ω–∏–∂–µ —ç—Ç–æ–π —Å—É–º–º—ã, –≤–∞–º –±—É–¥—É—Ç –ø–æ—Å—Ç—É–ø–∞—Ç—å —Ç–æ–ª—å–∫–æ –ë–ï–ó–ù–ê–õ–ò–ß–ù–´–ï –∑–∞–∫–∞–∑—ã.')
        else:
            await message.answer('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ..')
            await message.bot.send_message(
                chat_id=admin,
                text=f'–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ —É {last_name} {first_name} {middle_name}, –æ—à–∏–±–∫–∞: {response}')
    elif method == 'üíµ–ù–∞–ª / –ë–µ–∑–Ω–∞–ª' and user is not None:
        # —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–∏–º–∏—Ç–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ –Ω–∞–ª / –±–µ–∑–Ω–Ω–∞–ª.
        response = await change_of_payment_method(message, session, '1', str(phone), taxi_id)
        status = response.get('status')
        if status == 200:
            await message.answer(f'{first_name} {middle_name}, '
                                 '–í–∞–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏–º–∏—Ç 1 —Ä—É–±. '
                                 '–¢–µ–ø–µ—Ä—å –í–∞–º –±—É–¥—É—Ç –ø–æ—Å—Ç—É–ø–∞—Ç—å –ù–ê–õ–ò–ß–ù–´–ï –∏ –ë–ï–ó–ù–ê–õ–ò–ß–ù–´–ï –∑–∞–∫–∞–∑—ã.')
        else:
            await message.answer('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ..')
            await message.bot.send_message(
                chat_id=admin,
                text=f'–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ —É {last_name} {first_name} {middle_name}, '
                     f'–æ—à–∏–±–∫–∞: {response}.')
    elif method == 'üï∞–°–º–µ–Ω–∞ –≤ –¥–æ–ª–≥' and user is not None:
        # —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–∏–º–∏—Ç–∞ –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã –≤ –¥–æ–ª–≥.
        access, limit = await access_debt_mode(session, telegram_id)
        if access:
            response = await change_of_payment_method(message, session, str(limit), str(phone), taxi_id)
            status = response.get('status')
            if status == 200:
                await message.answer(f'{first_name} {middle_name}, '
                                     f'–í–∞–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏–º–∏—Ç {limit}, '
                                     '—Ç–µ–ø–µ—Ä—å –í—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å —Å–º–µ–Ω—É –≤ –¥–æ–ª–≥.')
            elif status != 200:
                msg = response.get('message')
                await message.answer('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ..')
                await message.bot.send_message(
                    chat_id=admin,
                    text=f'–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ —É {last_name} {first_name} {middle_name},'
                         f' —Å—Ç–∞—Ç—É—Å: {status}, –æ–ø–∏—Å–∞–Ω–∏–µ: {msg}')
        elif not access:
            await message.answer('–°–º–µ–Ω–∞ –≤ –¥–æ–ª–≥ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞!')
    else:
        await message.answer(f'–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!')
    # —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    await state.finish()


async def amount_order(message: Message, session, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞"""
    admin = message.bot.get('config').tg_bot.admin_ids[0]

    if message.text == 'üèÅ–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫. –∑–∞–∫–∞–∑':
        await message.answer('–§—É–Ω–∫—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞!')
    else:
        telegram_id = message.chat.id
        user = await get_user(session, telegram_id)

        # –í —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é –∞—Ä–≥—É–º–µ–Ω—Ç–∞ amount –æ–ø—Ä–µ–¥–µ–ª–∏–º —Å—É–º–º—É —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–∫–∞–∑–∞
        if user is not None:
            msg_for_delete_current_order = await message.answer(text='üöñ –ü—Ä–æ–≤–µ—Ä—è—é —Ç–µ–∫—É—â–∏–µ –∑–∞–∫–∞–∑—ã.. –ó–∞–π–º–µ—Ç –∫–∞–∫–æ–µ —Ç–æ –≤—Ä–µ–º—è..')
            await state.update_data(msg_for_delete_current_order=msg_for_delete_current_order.message_id)
            response = await change_working_order_method(
                message, session, state, str(user[3]), user[2], way='amount', amount=True
            )
            status = response.get('status')
            if status != 200:
                msg = response.get('message')
                await message.answer('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ..')
                await message.bot.send_message(
                    chat_id=admin,
                    text=f'–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ —É {user[4]} {user[0]} {user[1]},'
                         f' —Å—Ç–∞—Ç—É—Å: {status}, –æ–ø–∏—Å–∞–Ω–∏–µ: {msg}')
        else:
            await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!')


async def complete_order(call: CallbackQuery, session, state: FSMContext):
    """–í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã —Å –ø–æ—Å–ª–µ–¥—É—é—â–∏–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º / –æ—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è."""
    admin = call.message.bot.get('config').tg_bot.admin_ids[0]
    # telegra_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    telegram_id = call.message.chat.id
    user = await get_user(session, telegram_id)
    response = None
    # –≤—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞
    if call.data == 'fix__confirm':
        response = await change_working_order_method(
            call, session, state, str(user[3]), user[2], way='fixed', amount=False
        )
    elif call.data == 'taximeter__confirm':
        response = await change_working_order_method(
            call, session, state, str(user[3]), user[2], way='taximeter', amount=False
        )
    elif call.data == 'back__cancel':
        await call.answer(
            text='–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞',
        )

    status = response.get('status')
    if status == 200:
        await call.answer('‚ò∫Ô∏è–ó–∞–∫–∞–∑ –ø–µ—Ä–µ—à—ë–ª –≤ —Å—Ç–∞—Ç—É—Å "–ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ"')
    elif status != 200:
        msg = response.get('message')
        await call.message.answer('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ..')
        await call.message.bot.send_message(
            chat_id=admin,
            text=f'–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ —É {user[4]} {user[0]} {user[1]},'
                 f' —Å—Ç–∞—Ç—É—Å: {status}, –æ–ø–∏—Å–∞–Ω–∏–µ: {msg}')

    msg_delete = (await state.get_data()).get('msg_order_delete')
    await call.bot.delete_message(chat_id=call.message.chat.id, message_id=msg_delete)
    await state.finish()


async def cancel_order(message: Message, session, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–∫–∞–∑–∞."""
    telegram_id = message.chat.id
    user = await get_user(session, telegram_id)
    if user is not None:
        await message.answer(
            text='–ü—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞ —Å –í–∞—Å –±—É–¥—É—Ç —Å–ø–∏—Å–∞–Ω—ã –±–∞–ª–ª—ã –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑?',
            reply_markup=cancel_order_keyboard
        )
    else:
        await message.answer(f'–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!')


async def confirm_cancel_order(call: CallbackQuery, session, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞."""
    # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É, –∞ —Å—Ä–∞–∑—É –Ω–∞ –∫–Ω–æ–ø–∫—É, —Ç–æ –±—É–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –ë–î.
    admin = call.message.bot.get('config').tg_bot.admin_ids[0]
    telegram_id = call.message.chat.id
    user = await get_user(session, telegram_id)

    if call.data == 'cancel_confirm' and user is not None:
        msg_for_delete_current_order = await call.message.answer(text='üöñ –ü—Ä–æ–≤–µ—Ä—è—é —Ç–µ–∫—É—â–∏–µ –∑–∞–∫–∞–∑—ã.. –û–∂–∏–¥–∞–π—Ç–µ..')
        await state.update_data(msg_for_delete_current_order=msg_for_delete_current_order.message_id)
        response = await change_working_order_method(
            call, session, state, str(user[3]), user[2], way='cancel_confirm', amount=False)
        status = response.get('status')
        if status == 200:
            await call.message.delete()
            if response.get('empty_order') is None:
                await call.answer('üò•–¢–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω!')
        elif status != 200:
            msg = response.get('message')
            await call.message.answer('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ..')
            await call.message.bot.send_message(
                chat_id=admin,
                text=f'–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞ —É {user[4]} {user[0]} {user[1]},'
                     f' —Å—Ç–∞—Ç—É—Å: {status}, –æ–ø–∏—Å–∞–Ω–∏–µ: {msg}')
    elif call.data == 'not_cancel' and user is not None:
        await call.message.delete()
        await call.answer(text='–¢–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑ –Ω–µ –æ—Ç–º–µ–Ω–µ–Ω!')
    else:
        await call.message.answer(f'–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!')
    await state.finish()


async def get_help(message: Message, session):
    """–ü–æ–ª—É—á–∏—Ç—å —É—Å–ª–æ–≤–∏—è —Å–ª—É–∂–±—ã —Ç–∞–∫—Å–∏."""
    text_help = (await get_info_from_help(session)).text

    await message.answer(text_help)


async def get_unpaid_orders(message: Message, session, state: FSMContext):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –ø–æ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–º –∑–∞–∫–∞–∑–∞–º."""
    telegram_id = message.chat.id
    user = await get_user(session, telegram_id)
    if user is not None:
        msg_delete_unpaid = await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤',
                                                 reply_markup=unpaid_orders_keyboard)
        await state.update_data(msg_delete_unpaid=msg_delete_unpaid.message_id)
    else:
        await message.answer(f'–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!')


async def select_period_unpaid_orders(call: CallbackQuery, session, state: FSMContext):
    """–í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞—Ö."""
    admin = call.message.bot.get('config').tg_bot.admin_ids[0]
    # telegra_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    telegram_id = call.message.chat.id
    user = await get_user(session, telegram_id)

    # –æ—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞—Ä–∞–±–æ—Ç–∫–∞
    msg_for_delete = (await state.get_data()).get('msg_delete_unpaid')
    await call.bot.delete_message(chat_id=call.message.chat.id, message_id=msg_for_delete)

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É
    date_today = date.today()
    response = None
    date_last_month = date_today.replace(month=(date_today.replace(day=1) - timedelta(days=1)).month)
    period = {
        'unpaid_today': f'–∑–∞ —Å–µ–≥–æ–¥–Ω—è: {date_today.strftime("%d.%m.%Y –≥.")}',
        'unpaid_yesterday': f'–∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å: {(date_today - timedelta(days=1)).strftime("%d.%m.%Y –≥.")}',
        'unpaid_week':
            f'–∑–∞ –Ω–µ–¥–µ–ª—é: —Å {(date_today - timedelta(weeks=1)).strftime("%d.%m.%Y –≥.")} '
            f'–ø–æ {date_today.strftime("%d.%m.%Y –≥.")}',
        'unpaid_month':
            f'–∑–∞ –º–µ—Å—è—Ü: —Å {date_last_month.strftime("%d.%m.%Y –≥.")} '
            f'–ø–æ {date_today.strftime("%d.%m.%Y –≥.")}'
    }
    msg_del_unpaid = await call.message.answer(
        text=f'üîé –ü–æ–∏—Å–∫ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ {period.get(call.data)}. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –∑–∞–π–º—ë—Ç –æ–∫–æ–ª–æ –º–∏–Ω—É—Ç—ã. –û–∂–∏–¥–∞–π—Ç–µ..')

    if call.data == 'unpaid_today':
        day = str(date_today.day)
        month = date_today.month

        # –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–∞—Ç –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        interval = {
            # –∏–º–ø–æ—Ä—Ç –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ tgbot.services.other_functions.conts
            'start_day': day, 'start_month': list_months.get(month),
            'end_day': day, 'end_month': list_months.get(month),
        }

        response = await settings_for_select_period_unpaid_orders(call, session, str(user[3]), user[2], interval)

    elif call.data == 'unpaid_yesterday':
        yesterday = str((date_today - timedelta(days=1)).day)
        month = date_today.month

        # –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–∞—Ç –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        interval = {
            # –∏–º–ø–æ—Ä—Ç –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ tgbot.services.other_functions.conts
            'start_day': yesterday, 'start_month': list_months.get(month),
            'end_day': yesterday, 'end_month': list_months.get(month),
        }

        response = await settings_for_select_period_unpaid_orders(call, session, str(user[3]), user[2], interval)

    elif call.data == 'unpaid_week':
        response = await settings_for_select_period_unpaid_orders(call, session, str(user[3]), user[2], interval=None)

    elif call.data == 'unpaid_month':
        start_day = str(date_today.day)
        start_month = date_today.replace(month=(date_today.replace(day=1) - timedelta(days=1)).month).month
        today = str(date_today.day)
        current_month = date_today.month

        # –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–∞—Ç –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        interval = {
            # –∏–º–ø–æ—Ä—Ç –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ tgbot.services.other_functions.conts
            'start_day': start_day, 'start_month': list_months.get(start_month),
            'end_day': today, 'end_month': list_months.get(current_month),
        }
        response = await settings_for_select_period_unpaid_orders(call, session, str(user[3]), user[2], interval)
    status = response.get('status')
    if status == 200:
        await call.bot.delete_message(chat_id=call.message.chat.id, message_id=msg_del_unpaid.message_id)

        unpaid_orders = response.get('unpaid_orders')
        if not unpaid_orders:
            await call.message.answer(text=f'{period.get(call.data).capitalize()} –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç ‚úÖ')
        else:
            for order in unpaid_orders:
                await call.message.answer(text=f'‚ùå {period.get(call.data).capitalize()}\n'
                                               f'–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order[0]}\n'
                                               f'–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {order[1]}\n'
                                               f'–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {order[2]}\n'
                                               f'–ú–∞—Ä—à—Ä—É—Ç: {order[3]}\n\n')
    elif status != 200:
        msg = response.get('message')
        await call.message.answer('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ..')
        await call.message.bot.send_message(
            chat_id=admin,
            text=f'–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ —É {user[4]} {user[0]} {user[1]},'
                 f' —Å—Ç–∞—Ç—É—Å: {status}, –æ–ø–∏—Å–∞–Ω–∏–µ: {msg}.')

    await state.finish()


async def get_earnings(message: Message, session, state: FSMContext):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –ø–æ –∑–∞—Ä–∞–±–æ—Ç–∫—É."""
    # telegra_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    telegram_id = message.chat.id
    user = await get_user(session, telegram_id)
    if user is not None:
        msg_delete_earn = await message.answer(
            text='–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞', reply_markup=earnings_keyboard)
        await state.update_data(msg_delete_earn=msg_delete_earn.message_id)
    else:
        await message.answer(f'–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!')


async def cancel_unpaid_order(call: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞—Ä–∞–±–æ—Ç–∫–∞."""
    msg_for_delete = (await state.get_data()).get('msg_delete_unpaid')
    await call.bot.delete_message(chat_id=call.message.chat.id, message_id=msg_for_delete)
    await state.finish()


async def select_period_earnings(call: CallbackQuery, session, state: FSMContext):
    """–í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞—Ä–∞–±–æ—Ç–∫–µ."""
    admin = call.message.bot.get('config').tg_bot.admin_ids[0]
    telegram_id = call.message.chat.id
    user = await get_user(session, telegram_id)

    # –æ—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞—Ä–∞–±–æ—Ç–∫–∞
    msg_for_delete = (await state.get_data()).get('msg_delete_earn')
    await call.bot.delete_message(chat_id=call.message.chat.id, message_id=msg_for_delete)

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É
    date_today = date.today()
    response = None
    date_last_month = date_today.replace(month=(date_today.replace(day=1) - timedelta(days=1)).month)
    period = {
        'earnings_today': f'–∑–∞ —Å–µ–≥–æ–¥–Ω—è: {date_today.strftime("%d.%m.%Y –≥.")}',
        'earnings_yesterday': f'–∑–∞ –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å: {(date_today - timedelta(days=1)).strftime("%d.%m.%Y –≥.")}',
        'earnings_week':
            f'–∑–∞ –Ω–µ–¥–µ–ª—é: —Å {(date_today - timedelta(weeks=1)).strftime("%d.%m.%Y –≥.")} '
            f'–ø–æ {date_today.strftime("%d.%m.%Y –≥.")}',
        'earnings_month':
            f'–∑–∞ –º–µ—Å—è—Ü: —Å {date_last_month.strftime("%d.%m.%Y –≥.")} '
            f'–ø–æ {date_today.strftime("%d.%m.%Y –≥.")}'
    }

    msg_del_earn = await call.message.answer(
        text=f'üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç—á–µ—Ç–∞ –∏–∑ –¥–∏—Å–ø–µ—Ç—á–µ—Ä—Å–∫–æ–π {period.get(call.data)}. '
             f'–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –∑–∞–π–º—ë—Ç –æ–∫–æ–ª–æ –º–∏–Ω—É—Ç—ã. –û–∂–∏–¥–∞–π—Ç–µ..')

    if call.data == 'earnings_today':
        day = str(date_today.day)
        month = date_today.month

        # –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–∞—Ç –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        interval = {
            # –∏–º–ø–æ—Ä—Ç –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ tgbot.services.other_functions.conts
            'start_day': day, 'start_month': list_months.get(month),
            'end_day': day, 'end_month': list_months.get(month),
        }
        response = await settings_for_select_period_earnings_driver(call, session, str(user[3]), user[2], interval)

    elif call.data == 'earnings_yesterday':
        yesterday = str((date_today - timedelta(days=1)).day)
        month = date_today.month

        # –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–∞—Ç –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        interval = {
            # –∏–º–ø–æ—Ä—Ç –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ tgbot.services.other_functions.conts
            'start_day': yesterday, 'start_month': list_months.get(month),
            'end_day': yesterday, 'end_month': list_months.get(month),
        }

        response = await settings_for_select_period_earnings_driver(call, session, str(user[3]), user[2], interval)

    elif call.data == 'earnings_week':
        start_day = str((date_today - timedelta(weeks=1)).day)
        start_month = (date_today - timedelta(weeks=1)).month
        today = str(date_today.day)
        current_month = date_today.month

        # –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–∞—Ç –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        interval = {
            # –∏–º–ø–æ—Ä—Ç –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ tgbot.services.other_functions.conts
            'start_day': start_day, 'start_month': list_months.get(start_month),
            'end_day': today, 'end_month': list_months.get(current_month),
        }
        response = await settings_for_select_period_earnings_driver(call, session, str(user[3]), user[2], interval)

    elif call.data == 'earnings_month':
        start_day = str(date_today.day)
        start_month = date_today.replace(month=(date_today.replace(day=1) - timedelta(days=1)).month).month
        today = str(date_today.day)
        current_month = date_today.month

        # –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–∞—Ç –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        interval = {
            # –∏–º–ø–æ—Ä—Ç –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ tgbot.services.other_functions.conts
            'start_day': start_day, 'start_month': list_months.get(start_month),
            'end_day': today, 'end_month': list_months.get(current_month),
        }

        response = await settings_for_select_period_earnings_driver(call, session, str(user[3]), user[2], interval)

    status = response.get('status')
    if status == 200:
        await call.bot.delete_message(chat_id=call.message.chat.id, message_id=msg_del_earn.message_id)

        string = response.get('earnings')
        if len(string) < 16:
            string.insert(12, '0,00')

        await call.message.answer(text=f'üìä <b> –û—Ç—á–µ—Ç {period.get(call.data)}</b>\n\n'
                                       f'–ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –ø–æ–µ–∑–¥–∫–∏: {string[0]}\n'
                                       f'–°—É–º–º–∞ —Å —Ç–∞–∫—Å–æ–º–µ—Ç—Ä–∞: {string[1]}\n'
                                       f'–ü—Ä–æ–±–µ–≥ —Å –ø–∞—Å—Å–∞–∂–∏—Ä–æ–º: {string[2]}\n\n'
                                       f'–ù–∞–ª–∏—á–Ω—ã–µ: {string[3]}\n'
                                       f'–û–ø–ª–∞—Ç–∞ –ø–æ –∫–∞—Ä—Ç–µ: {string[4]}\n'
                                       f'–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –æ–ø–ª–∞—Ç–∞: {string[5]}\n'
                                       f'–ß–∞–µ–≤—ã–µ: {string[6]}\n'
                                       f'–ü—Ä–æ–º–æ–∞–∫—Ü–∏–∏: {string[7]}\n'
                                       f'–ë–æ–Ω—É—Å: {string[8]}\n'
                                       f'–ö–æ–º–∏—Å—Å–∏–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: {string[9]}\n'
                                       f'–ö–æ–º–∏—Å—Å–∏–∏ –ø–∞—Ä—Ç–Ω—ë—Ä–∞: {string[10]}\n'
                                       f'–ü—Ä–æ—á–∏–µ –ø–ª–∞—Ç–µ–∂–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: {string[11]}\n'
                                       f'–ó–∞–ø—Ä–∞–≤–∫–∏: {string[12]}\n\n'
                                       f'–ò–¢–û–ì–û: {string[13]}\n'
                                       f'–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: {string[14]}\n'
                                       f'–°—Ä–µ–¥–Ω–µ—á–∞—Å–æ–≤–æ–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫: {string[15]}\n')
    elif status != 200:
        msg = response.get('message')
        await call.message.answer('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ..')
        await call.message.bot.send_message(
            chat_id=admin,
            text=f'–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ —É {user[4]} {user[0]} {user[1]},'
                 f' —Å—Ç–∞—Ç—É—Å: {status}, –æ–ø–∏—Å–∞–Ω–∏–µ: {msg}')
    await state.finish()


async def cancel_earnings(call: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞—Ä–∞–±–æ—Ç–∫–∞."""
    msg_for_delete = (await state.get_data()).get('msg_delete_earn')
    await call.bot.delete_message(chat_id=call.message.chat.id, message_id=msg_for_delete)
    await state.finish()



def register_user(dp: Dispatcher):
    dp.register_message_handler(user_start, CommandStart(), state='*')
    dp.register_message_handler(payment_method, text=['üí≥–ë–µ–∑–Ω–∞–ª', 'üíµ–ù–∞–ª / –ë–µ–∑–Ω–∞–ª', 'üï∞–°–º–µ–Ω–∞ –≤ –¥–æ–ª–≥'])
    dp.register_message_handler(amount_order, text='üèÅ–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫. –∑–∞–∫–∞–∑')
    dp.register_callback_query_handler(complete_order, text=order_types)
    dp.register_message_handler(cancel_order, text='‚ùå–û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑')
    dp.register_callback_query_handler(confirm_cancel_order, text=['cancel_confirm', 'not_cancel'])
    dp.register_message_handler(get_help, text='üìù–°–ø—Ä–∞–≤–∫–∞')
    dp.register_message_handler(get_unpaid_orders, text='üìà–ù–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã')
    dp.register_callback_query_handler(select_period_unpaid_orders, text=callback_unpaid)
    dp.register_callback_query_handler(cancel_unpaid_order, text='unpaid_cancel')
    dp.register_message_handler(get_earnings, text='üí∞–ó–∞—Ä–∞–±–æ—Ç–æ–∫')
    dp.register_callback_query_handler(select_period_earnings, text=callback_earnings)
    dp.register_callback_query_handler(cancel_earnings, text='earnings_cancel')
